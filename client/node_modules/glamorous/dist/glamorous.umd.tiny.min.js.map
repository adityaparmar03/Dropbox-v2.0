{"version":3,"file":"glamorous.umd.tiny.min.js","sources":["../src/with-theme.js","../src/get-glamor-classname.js","../src/create-glamorous.js","../src/react-compat.js","../src/constants.js","../src/tiny.js"],"sourcesContent":["import React, {Component} from 'react'\n\nimport {CHANNEL} from './constants'\nimport {PropTypes} from './react-compat'\n\nfunction generateWarningMessage(Comp) {\n  const componentName = Comp.displayName || Comp.name || 'FunctionComponent'\n  // eslint-disable-next-line max-len\n  return `glamorous warning: Expected component called \"${componentName}\" which uses withTheme to be within a ThemeProvider but none was found.`\n}\n\nexport default function withTheme(\n  ComponentToTheme,\n  {noWarn = false, createElement = true} = {},\n) {\n  class ThemedComponent extends Component {\n    static propTypes = {\n      theme: PropTypes.object,\n    }\n    warned = noWarn\n    state = {theme: {}}\n    setTheme = theme => this.setState({theme})\n\n    // eslint-disable-next-line complexity\n    componentWillMount() {\n      if (!this.context[CHANNEL]) {\n        if (process.env.NODE_ENV !== 'production' && !this.warned) {\n          this.warned = true\n          // eslint-disable-next-line no-console\n          console.warn(generateWarningMessage(ComponentToTheme))\n        }\n      }\n      const {theme} = this.props\n      if (this.context[CHANNEL]) {\n        // if a theme is provided via props,\n        // it takes precedence over context\n        this.setTheme(theme ? theme : this.context[CHANNEL].getState())\n      } else {\n        this.setTheme(theme || {})\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if (this.props.theme !== nextProps.theme) {\n        this.setTheme(nextProps.theme)\n      }\n    }\n\n    componentDidMount() {\n      if (this.context[CHANNEL] && !this.props.theme) {\n        // subscribe to future theme changes\n        this.unsubscribe = this.context[CHANNEL].subscribe(this.setTheme)\n      }\n    }\n\n    componentWillUnmount() {\n      // cleanup subscription\n      this.unsubscribe && this.unsubscribe()\n    }\n\n    render() {\n      if (createElement) {\n        return <ComponentToTheme {...this.props} {...this.state} />\n      } else {\n        // this allows us to effectively use the GlamorousComponent\n        // as our `render` method without going through lifecycle hooks.\n        // Also allows us to forward the context in the scenario where\n        // a user wants to add more context.\n        // eslint-disable-next-line babel/new-cap\n        return ComponentToTheme({...this.props, ...this.state}, this.context)\n      }\n    }\n  }\n\n  const defaultContextTypes = {\n    [CHANNEL]: PropTypes.object,\n  }\n\n  let userDefinedContextTypes = null\n\n  // configure the contextTypes to be settable by the user,\n  // however also retaining the glamorous channel.\n  Object.defineProperty(ThemedComponent, 'contextTypes', {\n    enumerable: true,\n    configurable: true,\n    set(value) {\n      userDefinedContextTypes = value\n    },\n    get() {\n      // if the user has provided a contextTypes definition,\n      // merge the default context types with the provided ones.\n      if (userDefinedContextTypes) {\n        return {\n          ...defaultContextTypes,\n          ...userDefinedContextTypes,\n        }\n      }\n      return defaultContextTypes\n    },\n  })\n\n  return ThemedComponent\n}\n","import {css} from 'glamor'\n/**\n * This function takes a className string and gets all the\n * associated glamor styles. It's used to merge glamor styles\n * from a className to make sure that specificity is not\n * a problem when passing a className to a component.\n * @param {String} [className=''] the className string\n * @return {Object} { glamorStyles, glamorlessClassName }\n *   - glamorStyles is an array of all the glamor styles objects\n *   - glamorlessClassName is the rest of the className string\n *     without the glamor classNames\n */\nfunction extractGlamorStyles(className) {\n  const glamorlessClassName = []\n  const glamorStyles = []\n  className.toString().split(' ').forEach(name => {\n    if (name.indexOf('css-') === 0) {\n      const style = buildGlamorSrcFromClassName(name)\n      glamorStyles.push(style)\n    } else {\n      glamorlessClassName.push(name)\n    }\n  })\n\n  return {glamorlessClassName, glamorStyles}\n}\n\n/** Glamor's css function returns an object with the shape\n *\n * {\n *   [`data-css-${hash}`]: '',\n *   toString() { return `css-${hash}` }\n * }\n *\n * Whenever glamor's build function encounters an object with\n * this shape it just pulls the resulting styles from the cache.\n *\n * note: the toString method is not needed to qualify the shape\n**/\nfunction buildGlamorSrcFromClassName(className) {\n  return {[`data-${className}`]: ''}\n}\n\nexport default getGlamorClassName\n\nfunction getGlamorClassName({\n  styles,\n  props,\n  cssOverrides,\n  cssProp,\n  theme,\n  context,\n}) {\n  const {mappedArgs, nonGlamorClassNames} = handleStyles(\n    [...styles, props.className, cssOverrides, cssProp],\n    props,\n    theme,\n    context,\n  )\n  const glamorClassName = css(...mappedArgs).toString()\n  const extras = nonGlamorClassNames.join(' ').trim()\n  return `${glamorClassName} ${extras}`.trim()\n}\n\n// this next function is on a \"hot\" code-path\n// so it's pretty complex to make sure it's fast.\n// eslint-disable-next-line complexity\nfunction handleStyles(styles, props, theme, context) {\n  let current\n  const mappedArgs = []\n  const nonGlamorClassNames = []\n  for (let i = 0; i < styles.length; i++) {\n    current = styles[i]\n    if (typeof current === 'function') {\n      const result = current(props, theme, context)\n      if (typeof result === 'string') {\n        const {glamorStyles, glamorlessClassName} = extractGlamorStyles(\n          result,\n        )\n        mappedArgs.push(...glamorStyles)\n        nonGlamorClassNames.push(...glamorlessClassName)\n      } else {\n        mappedArgs.push(result)\n      }\n    } else if (typeof current === 'string') {\n      const {glamorStyles, glamorlessClassName} = extractGlamorStyles(\n        current,\n      )\n      mappedArgs.push(...glamorStyles)\n      nonGlamorClassNames.push(...glamorlessClassName)\n    } else if (Array.isArray(current)) {\n      const recursed = handleStyles(current, props, theme, context)\n      mappedArgs.push(...recursed.mappedArgs)\n      nonGlamorClassNames.push(...recursed.nonGlamorClassNames)\n    } else {\n      mappedArgs.push(current)\n    }\n  }\n  return {mappedArgs, nonGlamorClassNames}\n}\n","/*\n * This is a relatively small abstraction that's ripe for open sourcing.\n * Documentation is in the README.md\n */\nimport React from 'react'\nimport {PropTypes} from './react-compat'\nimport withTheme from './with-theme'\nimport getGlamorClassName from './get-glamor-classname'\n\nexport default createGlamorous\n\nfunction createGlamorous(splitProps) {\n  // TODO: in a breaking version, make this default to true\n  glamorous.config = {useDisplayNameInClassName: false}\n\n  return glamorous\n\n  /**\n  * This is the main export and the function that people\n  * interact with most directly.\n  *\n  * It accepts a component which can be a string or\n  * a React Component and returns\n  * a \"glamorousComponentFactory\"\n  * @param {String|ReactComponent} comp the component to render\n  * @param {Object} options helpful info for the GlamorousComponents\n  * @return {Function} the glamorousComponentFactory\n  */\n  function glamorous(comp, {rootEl, displayName, forwardProps = []} = {}) {\n    return glamorousComponentFactory\n\n    /**\n     * This returns a React Component that renders the comp (closure)\n     * with a className based on the given glamor styles object(s)\n     * @param {...Object|Function} styles the styles to create with glamor.\n     *   If any of these are functions, they are invoked with the component\n     *   props and the return value is used.\n     * @return {ReactComponent} the ReactComponent function\n     */\n    function glamorousComponentFactory(...styles) {\n      /**\n       * This is a component which will render the comp (closure)\n       * with the glamorous styles (closure). Forwards any valid\n       * props to the underlying component.\n       */\n      const GlamorousComponent = withTheme(\n        (props, context) => {\n          /* eslint no-use-before-define: 0 */\n          const {toForward, cssOverrides, cssProp} = splitProps(\n            props,\n            GlamorousComponent,\n          )\n\n          // freeze the theme object in dev mode\n          const theme = process.env.NODE_ENV === 'production' ?\n            props.theme :\n            Object.freeze(props.theme)\n\n          // create className to apply\n          const fullClassName = getGlamorClassName({\n            styles: GlamorousComponent.styles,\n            props,\n            cssOverrides,\n            cssProp,\n            theme,\n            context,\n          })\n          const debugClassName = glamorous.config.useDisplayNameInClassName ?\n            cleanClassname(GlamorousComponent.displayName) :\n            ''\n          const className = `${fullClassName} ${debugClassName}`.trim()\n\n          return React.createElement(GlamorousComponent.comp, {\n            ref: props.innerRef,\n            ...toForward,\n            className,\n          })\n        },\n        {noWarn: true, createElement: false},\n      )\n\n      GlamorousComponent.propTypes = {\n        className: PropTypes.string,\n        cssOverrides: PropTypes.object,\n        theme: PropTypes.object,\n        innerRef: PropTypes.func,\n        glam: PropTypes.object,\n      }\n\n      function withComponent(newComp, options = {}) {\n        return glamorous(newComp, {\n          forwardProps: GlamorousComponent.forwardProps,\n          ...options,\n        })(GlamorousComponent.styles)\n      }\n\n      Object.assign(\n        GlamorousComponent,\n        getGlamorousComponentMetadata({\n          comp,\n          styles,\n          rootEl,\n          forwardProps,\n          displayName,\n        }),\n        {withComponent, isGlamorousComponent: true},\n      )\n      return GlamorousComponent\n    }\n  }\n\n  function getGlamorousComponentMetadata({\n    comp,\n    styles,\n    rootEl,\n    forwardProps,\n    displayName,\n  }) {\n    const componentsComp = comp.comp ? comp.comp : comp\n    return {\n      // join styles together (for anyone doing: glamorous(glamorous.a({}), {}))\n      styles: when(comp.styles, styles),\n      // keep track of the ultimate rootEl to render (we never\n      // actually render anything but\n      // the base component, even when people wrap a glamorous\n      // component in glamorous\n      comp: componentsComp,\n      rootEl: rootEl || componentsComp,\n      // join forwardProps (for anyone doing: glamorous(glamorous.a({}), {}))\n      forwardProps: when(comp.forwardProps, forwardProps),\n      // set the displayName to something that's slightly more\n      // helpful than `GlamorousComponent` :)\n      displayName: displayName || `glamorous(${getDisplayName(comp)})`,\n    }\n  }\n\n  function when(comp, prop) {\n    return comp ? comp.concat(prop) : prop\n  }\n\n  function getDisplayName(comp) {\n    return typeof comp === 'string' ?\n      comp :\n      comp.displayName || comp.name || 'unknown'\n  }\n}\n\nfunction cleanClassname(className) {\n  return className.replace(/ /g, '-').replace(/[^A-Za-z0-9\\-_]/g, '_')\n}\n","import React from 'react'\n\nlet PropTypes\n\n/* istanbul ignore next */\nif (parseFloat(React.version.slice(0, 4)) >= 15.5) {\n  /* istanbul ignore next */\n  try {\n    PropTypes = require('prop-types')\n    /* istanbul ignore next */\n  } catch (error) {\n    // ignore\n  }\n}\n/* istanbul ignore next */\nPropTypes = PropTypes || React.PropTypes\n\nexport {PropTypes}\n\n/*\neslint\n  import/no-mutable-exports:0,\n  import/prefer-default-export:0,\n  react/no-deprecated:0\n */\n","export const CHANNEL = '__glamorous__'\n","/* eslint no-unused-vars:0 */\nimport createGlamorous from './create-glamorous'\n\nfunction splitProps({\n  css: cssProp,\n  // these are plucked off\n  theme, // because they\n  className, // should never\n  innerRef, // be forwarded\n  glam, // to the lower\n  // component ever\n  ...rest\n}) {\n  return {toForward: rest, cssProp}\n}\n\nconst glamorous = createGlamorous(splitProps)\n\nexport default glamorous\n"],"names":["withTheme","ComponentToTheme","noWarn","createElement","ThemedComponent","warned","state","theme","setTheme","_this","setState","this","context","CHANNEL","props","getState","nextProps","unsubscribe","subscribe","React","Component","propTypes","PropTypes","object","defaultContextTypes","userDefinedContextTypes","defineProperty","value","extractGlamorStyles","className","glamorlessClassName","glamorStyles","toString","split","forEach","name","indexOf","style","buildGlamorSrcFromClassName","push","getGlamorClassName","styles","cssOverrides","cssProp","handleStyles","mappedArgs","nonGlamorClassNames","css","join","trim","current","i","length","result","Array","isArray","recursed","cleanClassname","replace","parseFloat","version","slice","require","error","splitProps","glamorous","comp","rootEl","displayName","forwardProps","GlamorousComponent","toForward","config","useDisplayNameInClassName","innerRef","string","func","assign","getGlamorousComponentMetadata","withComponent","newComp","options","isGlamorousComponent","componentsComp","when","getDisplayName","prop","concat","createGlamorous","glam"],"mappings":"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"}